package haru.core;

/*
	# 그래프
	- 노드와 에지로 구성된 집합
	- 노드는 데이터를 표현하는 단위, 에지는 노드를 연결하는 선

	- 유니온 파인드 : 그래프의 사이클이 생성되는지 판별하는 알고리즘
	- 위상 정렬 : 사이클이 없고 방향이 있는 그래프 (ex. 수강신청, 전후관계), 노드를 정렬, 정렬 결과가 꼭 1개는 아니다.
	- 다익스트라 : 최단거리 / 시작점이 있고, 시작점에서 다른 모든 노드로 가는 최단 거리 (단, 음수 간선 X)
	- 벨만포드 : 최단거리 / 다익스트라와 동일한데 음수 간선도 허용 / 음수 사이클이 있는지? (ex. 시간여행)
	- 플로이드 워셜 : 최단거리 / 시작점이 없고, 모든 노드에 대한 최단거리 (ex. 모든 도시간의 최단거리 등)
	- 최소 신장 트리 : 모든 노드를 연결하는데 최소의 비용으로 간선을 써서 연결, 사이클이 나올 수 없다.

	# 그래프 표현
	- 에지 리스트
		- 에지를 중심으로 그래프 표현
		- 배열에 출발 노드, 도착 노드를 저장하여 에지를 표현 / P[S][E]
		- 또는 출발 노드, 도착 노드, 가중치를 저장하여 에지를 표현  / P[S][E][V}
		- 노드 중심 알고리즘에선 잘 사용하지 않고, 벨만 포드나 크루스칼에서 사용한다.

	- 인접 행렬
		- 2차원 배열을 자료구조로 이용해 그래프 표현
		- 노드 중심 그래프 표현
		- P[N][N]
		- 노드 개수가 많으면 선언 자체를 할 수 없는 결험이 있어 노드 개수에 따라 사용 여부를 적절히 판단해야 한다.

	- 인접 리스트
		- ArrayList 로 그래프를 표현
		- 노드 개수만큼 ArrayList 를 선언
		- 가중치가 있을 경우 Node 클래스를 따로 구현한다.
		- 구현은 복잡하나 탐색 시간이 매우 뛰어나고 공간 효율도 좋다.
*/
public class Graph {
}
